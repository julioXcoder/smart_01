// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  EXAMINATION_OFFICER
  LECTURE
  STUDENT
  APPLICANT
  RESIDENCE_MANAGER
}

enum ApplicationStatus {
  UNDER_REVIEW //The application is currently being reviewed by the admissions team.
  ACCEPTED //The application has been approved. The applicant can now proceed to enrollment.
  REJECTED //The application has not been approved. The applicant will not be able to enroll.
  DRAFT
}

enum ProgrammeType {
  FULL_TIME
  PART_TIME
}

enum ProgrammeLevel {
  DIPLOMA
  CERTIFICATE
  BACHELOR
  MASTERS
  PHD
}

enum Origin {
  NECTA
  FOREIGN
  NECTA1988
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum EducationLevel {
  FORM_IV
  FORM_VI
  VETA_NVA_III
  NTA_LEVEL_IV
  NTA_LEVEL_V
  DIPLOMA
  DEGREE
  MASTERS
}

enum ResidenceRoomType {
  DOUBLE
  SINGLE
  SELF
}

enum ResidenceRoomStatus {
  OCCUPIED
  VACANT
  RESERVED
}

enum ResidencePlan {
  SHORT_TERM // Referring to the 1-month option.
  QUARTERLY // Indicating the 3-month choice.
}

//USERS

model Applicant {
  username       String @id @map("_id")
  hashedPassword String
  role           Role   @default(APPLICANT)
}

model ResidenceManager {
  username               String  @id @map("_id")
  firstName              String  @default("")
  middleName             String  @default("")
  lastName               String  @default("")
  hashedPassword         String
  role                   Role    @default(RESIDENCE_MANAGER)
  residenceName          String
  phone                  String  @default("")
  email                  String? @default("")
  alternativeEmail       String? @default("")
  alternativePhoneNumber String? @default("")
  streetAddress          String  @default("")
  city                   String  @default("")
  region                 String  @default("")
  postalCode             String  @default("")
  country                String  @default("")
  uniDistance            String  @default("")
}

//USERS

//APPLICANT DATA
// FIXME: ADD University application ID to check the application period
model ApplicantDetails {
  applicantUsername               String            @id @map("_id")
  status                          ApplicationStatus @default(DRAFT)
  formIVIndex                     String
  createdAt                       DateTime
  submittedAt                     DateTime?
  type                            ProgrammeLevel
  origin                          Origin
  highestEducationLevel           EducationLevel
  academicYearId                  String            @db.ObjectId
  // Properties from ApplicantProfile
  nida                            String            @default("")
  firstName                       String            @default("")
  middleName                      String            @default("")
  lastName                        String            @default("")
  nationality                     String            @default("")
  gender                          String            @default("")
  dateOfBirth                     String            @default("")
  maritalStatus                   String            @default("")
  placeOfBirth                    String            @default("")
  disability                      String            @default("")
  // Properties from ApplicantContacts
  phone                           String            @default("")
  email                           String?           @default("")
  alternativeEmail                String?           @default("")
  alternativePhoneNumber          String?           @default("")
  streetAddress                   String            @default("")
  city                            String            @default("")
  region                          String            @default("")
  postalCode                      String            @default("")
  country                         String            @default("")
  // Properties from ApplicantEmergencyContacts
  emergencyFullName               String            @default("")
  emergencyPhone                  String            @default("")
  emergencyEmail                  String?           @default("")
  emergencyAlternativeEmail       String?           @default("")
  emergencyAlternativePhoneNumber String?           @default("")
  emergencyStreetAddress          String            @default("")
  emergencyCity                   String            @default("")
  emergencyRegion                 String            @default("")
  emergencyPostalCode             String            @default("")
  emergencyCountry                String            @default("")
  emergencyRelation               String            @default("")
  // Properties from ApplicationPayment
  controlNumber                   String            @default("")
  paymentStatus                   PaymentStatus     @default(PENDING)

  applicantProgrammes          ApplicantProgrammes[]
  applicantNotification        ApplicantNotification[]
  applicantEducationBackground ApplicantEducationBackground[]
  applicantAdditionalFileData  ApplicantAdditionalFileData[]
}

model ApplicantNotification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String // Title of the notification
  message   String // The actual notification message
  read      Boolean // Whether the notification has been read
  timestamp DateTime // When the notification was created

  applicantId      String           @map("applicantId")
  applicantDetails ApplicantDetails @relation(fields: [applicantId], references: [applicantUsername])
}

model ApplicantProgrammes {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  programmeCode    String
  priority         Int
  applicantId      String           @map("applicantId")
  applicantDetails ApplicantDetails @relation(fields: [applicantId], references: [applicantUsername])
}

model ApplicantEducationBackground {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  position   Int
  level      String @default("")
  schoolName String @default("")
  startYear  String @default("")
  endYear    String @default("")

  applicantId      String           @map("applicantId")
  applicantDetails ApplicantDetails @relation(fields: [applicantId], references: [applicantUsername])
}

model ApplicantImageData {
  applicantUsername String @id @map("_id")
  imageUrl          String @default("")
  key               String @default("")
  name              String @default("")
  size              Int    @default(0)
}

model ApplicantEducationFileData {
  applicantUsername String @id @map("_id")
  url               String @default("")
  key               String @default("")
  type              String @default("")
  name              String @default("")
  size              Int    @default(0)
}

model ApplicantAdditionalFileData {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  applicantUsername String
  url               String
  type              String
  key               String
  name              String
  size              Int

  applicantId      String           @map("applicantId")
  applicantDetails ApplicantDetails @relation(fields: [applicantId], references: [applicantUsername])
}

//APPLICANT DATA

// RESIDENCE MANAGEMENT

model ResidenceRoom {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  amenities          String[]
  type               ResidenceRoomType
  status             ResidenceRoomStatus
  maintenance        Boolean
  residenceManagerId String
}

model ResidenceRoomImageData {
  key             String @id @map("_id")
  residenceRoomId String
  imageUrl        String @default("")
  name            String @default("")
  size            Int    @default(0)
}

model ResidenceBooking {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  customerId String
  roomId     String        @db.ObjectId
  paymentId  String        @db.ObjectId
  plan       ResidencePlan
}

model ResidencePayment {
  id     String        @id @default(auto()) @map("_id") @db.ObjectId
  date   DateTime
  amount String
  status PaymentStatus
}

// RESIDENCE MANAGEMENT

//UNIVERSITY HIERARCHY

model Campus {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  location  String
  shortHand String
  country   String
}

model College {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  campusId String @db.ObjectId
}

model Department {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String @unique
  collegeId String @db.ObjectId
}

model Programme {
  code           String         @id @map("_id")
  name           String
  level          ProgrammeLevel
  duration       Int
  type           ProgrammeType
  language       String
  departmentId   String         @db.ObjectId
  tuitionFee     Float
  applicationFee Float
  qualification  String
  availability   Boolean        @default(true)
}

//UNIVERSITY HIERARCHY

//UNIVERSITY ANUAL EVENTS

model AcademicYear {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime
  name      String   @unique

  applicationStartTime DateTime // Start time of the application
  applicationEndTime   DateTime // End time of the application
}

//UNIVERSITY ANUAL EVENTS
