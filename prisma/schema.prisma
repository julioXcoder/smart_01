// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum RoleName {
  EXAMINATION_OFFICER
  LECTURE
  STUDENT
  APPLICANT
}

enum ApplicantStatusName {
  SUBMITTED //The application has been received but not yet reviewed
  UNDER_REVIEW //The application is currently being reviewed by the admissions team.
  WAITLISTED // The applicant meets the admission requirements but the program is full. If a spot opens up, they may be admitted.
  ACCEPTED //The application has been approved. The applicant can now proceed to enrollment.
  REJECTED //The application has not been approved. The applicant will not be able to enroll.
  DEFERRED //The applicant has been accepted, but their admission has been postponed to a later date.
}

enum ProgrammeTypeName {
  FULL_TIME
  PART_TIME
}

enum ProgrammeLevelName {
  DIPLOMA
  CERTIFICATE
  BACHELOR
  MASTERS
  PHD
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

//USERS

model Applicant {
  username       String   @id @map("_id")
  hashedPassword String
  role           RoleName @default(APPLICANT)
  firstName      String
  lastName       String
  middleName     String
  applications   String[] @db.ObjectId
}

//USERS

//APPLICANT DATA

model ApplicantApplication {
  id                  String              @id @default(auto()) @map("_id") @db.ObjectId
  status              ApplicantStatusName @default(WAITLISTED)
  applicantUsername   String
  programs            String[]            @db.ObjectId
  educationBackground String[]            @db.ObjectId
  formIVIndex         String
  controlNumber       Int?
}

model ApplicantPrograms {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  programmeCode String
  priority      Int
}

model ApplicantProfile {
  applicantApplicationId String @id @map("_id")
  nida                   String @default("")
  nationality            String @default("")
  gender                 String @default("")
}

model ApplicantContacts {
  applicantApplicationId String  @id @map("_id")
  phone                  String  @default("")
  email                  String? @default("")
  alternativeEmail       String? @default("")
  alternativePhoneNumber String? @default("")
  streetAddress          String  @default("")
  city                   String  @default("")
  region                 String  @default("")
  postalCode             String  @default("")
  country                String  @default("")
}

model ApplicantEmergencyContacts {
  applicantApplicationId String  @id @map("_id")
  fullName               String  @default("")
  phone                  String  @default("")
  email                  String? @default("")
  alternativeEmail       String? @default("")
  alternativePhoneNumber String? @default("")
  streetAddress          String  @default("")
  city                   String  @default("")
  region                 String  @default("")
  postalCode             String  @default("")
  country                String  @default("")
  relation               String  @default("")
}

model ApplicantEducationBackground {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  position   Int
  level      String
  schoolName String
  startYear  String
  endYear    String
}

model ApplicationPayment {
  controlNumber     Int           @id @map("_id")
  applicantUsername String
  status            PaymentStatus @default(PENDING)
}

//APPLICANT DATA

//UNIVERSITY HIERARCHY

model Campus {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  location  String
  shortHand String
  country   String
}

model College {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  campusId String @db.ObjectId
}

model Department {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String @unique
  collegeId String @db.ObjectId
}

model Programme {
  code                String             @id @map("_id")
  name                String
  level               ProgrammeLevelName
  duration            Int
  type                ProgrammeTypeName
  language            String
  departmentId        String             @db.ObjectId
  tuitionFee          Float
  applicationFee      Float
  qualification       String
  applicationDeadline String
}

//UNIVERSITY HIERARCHY
