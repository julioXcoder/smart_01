// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  EXAMINATION_OFFICER
  LECTURE
  STUDENT
  APPLICANT
  RESIDENCE_MANAGER
}

enum ApplicationStatus {
  UNDER_REVIEW //The application is currently being reviewed by the admissions team.
  ACCEPTED //The application has been approved. The applicant can now proceed to enrollment.
  REJECTED //The application has not been approved. The applicant will not be able to enroll.
  DRAFT
}

enum SelectionStatus {
  Accepted
  Rejected
}

enum ProgrammeType {
  FULL_TIME
  PART_TIME
}

enum SubjectLevel {
  CSEE
  ACSEE
}

enum SubjectGrade {
  A
  B
  C
  D
  E
  F
}

enum ProgrammeLevel {
  DIPLOMA
  CERTIFICATE
  BACHELOR
  MASTERS
  PHD
}

enum ExaminationType {
  NECTA
  FOREIGN
  NECTA1988
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum EducationLevel {
  FORM_IV
  FORM_VI
  VETA_NVA_III
  NTA_LEVEL_IV
  NTA_LEVEL_V
  DIPLOMA
  DEGREE
  MASTERS
}

enum ResidenceRoomType {
  DOUBLE
  SINGLE
  SELF
}

enum ResidenceRoomStatus {
  OCCUPIED
  VACANT
  RESERVED
}

enum ResidencePlan {
  SHORT_TERM // Referring to the 1-month option.
  QUARTERLY // Indicating the 3-month choice.
}

enum ComponentType {
  ASSIGNMENT
  TEST
  PROJECT
  FIELD
}

enum HealthInsuranceStatus {
  ACTIVE
  INACTIVE
}

enum ProgrammeClass {
  I
  II
  III
  IV
}

enum Position {
  STUDENT_PRESIDENT
  CLASS_REPRESENTATIVE
}

//USERS

model Staff {
  staffId        String            @id @map("_id")
  hashedPassword String
  role           Role
  formalImage    StaffFormalImage?
  basicInfo      StaffBasicInfo?
  modules        ModuleInstance[]
}

model Applicant {
  username                 String                    @id @map("_id")
  hashedPassword           String
  role                     Role                      @default(APPLICANT)
  createdAt                DateTime
  studentOnboarding        StudentOnboarding?
  universityPolicyAccepted UniversityPolicyAccepted?
  applicationDetails       ApplicationDetails?
  applicantNotification    ApplicantNotification[]
  formalImageId            String                    @unique @db.ObjectId
  formalImage              FormalImage               @relation(fields: [formalImageId], references: [id])
  basicInfoId              String                    @unique @db.ObjectId
  basicInfo                BasicInfo                 @relation(fields: [basicInfoId], references: [id])
}

model Student {
  studentId           String                @id @map("_id")
  hashedPassword      String
  role                Role                  @default(STUDENT)
  positions           Position[]
  formalImageId       String                @unique @db.ObjectId
  formalImage         FormalImage           @relation(fields: [formalImageId], references: [id])
  basicInfoId         String                @unique @db.ObjectId
  basicInfo           BasicInfo             @relation(fields: [basicInfoId], references: [id])
  registrationHistory StudentRegistration[]
}

model ResidenceManager {
  username       String @id @map("_id")
  firstName      String @default("")
  middleName     String @default("")
  lastName       String @default("")
  hashedPassword String
  role           Role   @default(RESIDENCE_MANAGER)
}

//USERS

//APPLICANT DATA
// FIXME: ADD University application ID to check the application period
model ApplicationDetails {
  applicantUsername     String            @id @map("_id")
  applicant             Applicant         @relation(fields: [applicantUsername], references: [username])
  createdAt             DateTime
  submittedAt           DateTime?
  applicationStatus     ApplicationStatus @default(DRAFT)
  formIVIndex           String
  applicationType       ProgrammeLevel
  educationOrigin       ExaminationType
  highestEducationLevel EducationLevel

  // Properties from ApplicationPayment
  controlNumber                String                       @default("")
  paymentStatus                PaymentStatus                @default(PENDING)
  //relations
  applicantProgrammePriorities ApplicantProgrammePriority[]
  applicantSelection           ApplicantSelection?
}

model ApplicantNotification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String // Title of the notification
  message   String // The actual notification message
  read      Boolean // Whether the notification has been read
  timestamp DateTime // When the notification was created

  applicantId String
  applicant   Applicant @relation(fields: [applicantId], references: [username])
}

model ApplicantProgrammePriority {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  priority           Int
  applicantUsername  String
  applicationDetails ApplicationDetails @relation(fields: [applicantUsername], references: [applicantUsername])

  programmeCode String
  programme     Programme @relation(fields: [programmeCode], references: [code])
}

model UniversityPolicyAccepted {
  applicantUsername String    @id @map("_id")
  applicant         Applicant @relation(fields: [applicantUsername], references: [username])

  hasAcceptedRules Boolean   @default(false)
  acceptedAt       DateTime?
}

model StudentOnboarding {
  applicantUsername String    @id @map("_id")
  applicant         Applicant @relation(fields: [applicantUsername], references: [username])

  currentPage        Int     @default(0)
  hasDocuments       Boolean @default(false)
  hasAccommodation   Boolean @default(false)
  generatedStudentId String
  admissionNumber    String

  entryYearId String       @db.ObjectId
  entryYear   AcademicYear @relation(fields: [entryYearId], references: [id])

  // Entry Programme - students entry programme
  // Entry Year [âœ…]
  // Entry Category - add enum
  // Registration Number - auto generate
  // Addmission letter
}

model ApplicantSelection {
  applicantUsername     String             @id @map("_id")
  applicant             ApplicationDetails @relation(fields: [applicantUsername], references: [applicantUsername])
  selectionStatus       SelectionStatus
  admissionLetter       String?
  selectedProgrammeCode String             @db.ObjectId
  selectedProgramme     ProgrammeInstance  @relation(fields: [selectedProgrammeCode], references: [id])
}

//APPLICANT DATA

//STUDENT DATA

model StudentRegistration {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  controlNumber String        @default("")
  paymentStatus PaymentStatus @default(PENDING)
  registeredBy  String        @default("")

  // Registered On:
  // Sponsor
  // Campus

  studentId              String                  @unique
  student                Student                 @relation(fields: [studentId], references: [studentId])
  studyYearId            String                  @db.ObjectId
  studyYear              StudyYear               @relation(fields: [studyYearId], references: [id])
  semesterId             String                  @db.ObjectId
  semester               Semester                @relation(fields: [semesterId], references: [id])
  academicFee            AcademicFee?
  tuitionFee             TuitionFee?
  studentHealthInsurance StudentHealthInsurance?
  accomodationFee        AccomodationFee?
  mealsFee               MealsFee?
  academicScoreCards     AcademicScorecard[]
}

model AcademicFee {
  registrationId String              @id @map("_id") @db.ObjectId
  registration   StudentRegistration @relation(fields: [registrationId], references: [id])

  controlNumber Int
  paymentDue    Float
  amoutPayed    Float @default(0)
}

model TuitionFee {
  registrationId String              @id @map("_id") @db.ObjectId
  registration   StudentRegistration @relation(fields: [registrationId], references: [id])

  controlNumber Int
  paymentDue    Float
  amoutPayed    Float @default(0)
}

model StudentHealthInsurance {
  registrationId String              @id @map("_id") @db.ObjectId
  registration   StudentRegistration @relation(fields: [registrationId], references: [id])

  controlNumber Int
  stutus        HealthInsuranceStatus @default(INACTIVE)
}

model AccomodationFee {
  registrationId String              @id @map("_id") @db.ObjectId
  registration   StudentRegistration @relation(fields: [registrationId], references: [id])

  controlNumber Int
  paymentDue    Float
  amoutPayed    Float @default(0)
}

model MealsFee {
  registrationId String              @id @map("_id") @db.ObjectId
  registration   StudentRegistration @relation(fields: [registrationId], references: [id])

  controlNumber Int
  paymentDue    Float
  amoutPayed    Float @default(0)
}

//STUDENT DATA

//STAFF DATA

model StaffFormalImage {
  staffId String @id @map("_id")
  staff   Staff  @relation(fields: [staffId], references: [staffId])

  imageUrl String @default("")
  key      String @default("")
  name     String @default("")
  size     Int    @default(0)
}

model StaffBasicInfo {
  staffId String @id @map("_id")
  staff   Staff  @relation(fields: [staffId], references: [staffId])

  firstName  String
  middleName String
  lastName   String
  phone      String
  email      String
}

//STAFF DATA

// STUDENT X APPLICANT DATA

model FormalImage {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  applicant Applicant?
  student   Student?
  imageUrl  String     @default("")
  key       String     @default("")
  name      String     @default("")
  size      Int        @default(0)
}

model EducationFile {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  url  String @default("")
  key  String @default("")
  type String @default("")
  name String @default("")
  size Int    @default(0)

  basicInfoId String    @unique @db.ObjectId
  basicInfo   BasicInfo @relation(fields: [basicInfoId], references: [id])
}

model BirthCertificateFile {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  url  String @default("")
  key  String @default("")
  type String @default("")
  name String @default("")
  size Int    @default(0)

  basicInfoId String    @unique @db.ObjectId
  basicInfo   BasicInfo @relation(fields: [basicInfoId], references: [id])
}

model EducationBackground {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  position   Int
  level      String @default("")
  schoolName String @default("")
  startYear  String @default("")
  endYear    String @default("")

  basicInfoId String    @db.ObjectId
  basicInfo   BasicInfo @relation(fields: [basicInfoId], references: [id])
}

model AdditionalEducationFile {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  url  String
  type String
  key  String
  name String
  size Int

  basicInfoId String    @db.ObjectId
  basicInfo   BasicInfo @relation(fields: [basicInfoId], references: [id])
}

model BasicInfo {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  applicant Applicant?
  student   Student?

  // Profile
  firstName                 String  @default("")
  middleName                String  @default("")
  lastName                  String  @default("")
  nida                      String  @default("")
  nationality               String  @default("")
  gender                    String  @default("")
  dateOfBirth               String  @default("")
  maritalStatus             String  @default("")
  placeOfBirth              String  @default("")
  disability                String  @default("")
  // Contacts
  phone                     String  @default("")
  email                     String? @default("")
  alternativeEmail          String? @default("")
  alternativePhone          String? @default("")
  streetAddress             String  @default("")
  city                      String  @default("")
  region                    String  @default("")
  postalCode                String  @default("")
  country                   String  @default("")
  // EmergencyContacts
  emergencyFullName         String  @default("")
  emergencyPhone            String  @default("")
  emergencyEmail            String? @default("")
  emergencyAlternativeEmail String? @default("")
  emergencyAlternativePhone String? @default("")
  emergencyStreetAddress    String  @default("")
  emergencyCity             String  @default("")
  emergencyRegion           String  @default("")
  emergencyPostalCode       String  @default("")
  emergencyCountry          String  @default("")
  emergencyRelation         String  @default("")

  //model relationship
  educationFile            EducationFile?
  birthCertificateFile     BirthCertificateFile?
  educationBackgrounds     EducationBackground[]
  additionalEducationFiles AdditionalEducationFile[]
}

// STUDENT X APPLICANT DATA

// RESIDENCE MANAGEMENT

model ResidenceManagerDetails {
  username               String          @id @map("_id")
  residenceName          String
  phone                  String          @default("")
  email                  String?         @default("")
  alternativeEmail       String?         @default("")
  alternativePhoneNumber String?         @default("")
  streetAddress          String          @default("")
  city                   String          @default("")
  region                 String          @default("")
  postalCode             String          @default("")
  country                String          @default("")
  uniDistance            String          @default("")
  rooms                  ResidenceRoom[]
}

model ResidenceRoom {
  id                 String                  @id @default(auto()) @map("_id") @db.ObjectId
  amenities          String[]
  type               ResidenceRoomType
  status             ResidenceRoomStatus
  maintenance        Boolean
  images             ResidenceRoomImage[]
  residenceManagerId String
  managerDetails     ResidenceManagerDetails @relation(fields: [residenceManagerId], references: [username])
  bookings           ResidenceBooking[]
}

model ResidenceBooking {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  customerId String
  roomId     String            @db.ObjectId
  room       ResidenceRoom     @relation(fields: [roomId], references: [id])
  payment    ResidencePayment?
  plan       ResidencePlan
}

model ResidencePayment {
  bookingId String           @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  amount    String
  status    PaymentStatus
  booking   ResidenceBooking @relation(fields: [bookingId], references: [id])
}

model ResidenceRoomImage {
  key           String        @id @map("_id")
  roomId        String        @db.ObjectId
  residenceRoom ResidenceRoom @relation(fields: [roomId], references: [id])
  imageUrl      String        @default("")
  name          String        @default("")
  size          Int           @default(0)
}

// RESIDENCE MANAGEMENT

//UNIVERSITY SELECTION
model SelectionProgramme {
  id               String            @id @map("_id")
  name             String
  programmeMinReqs ProgrammeMinReq[]
}

model SelectionSubject {
  id             String          @id @map("_id")
  name           String
  subjectLevel   SubjectLevel
  subjectMinReqs SubjectMinReq[]
}

model ProgrammeMinReq {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  selectionProgrammeId String
  selectionProgramme   SelectionProgramme @relation(fields: [selectionProgrammeId], references: [id])
  minimumGPA           Int
  ProgMinStandardsId   String             @db.ObjectId
  progMinStandards     ProgMinStandards   @relation(fields: [ProgMinStandardsId], references: [id])
}

model SubjectMinReq {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  selectionSubjectId String
  SelectionSubject   SelectionSubject @relation(fields: [selectionSubjectId], references: [id])
  minimumGrade       SubjectGrade
  subjectStandardsId String           @db.ObjectId
  subjectStandards   SubjectStandards @relation(fields: [subjectStandardsId], references: [id])
}

model SubjectStandards {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  subjectList              SubjectMinReq[]
  subjectSelectionCriteria SubjectSelectionCriteria?
  progOptionId             String                    @unique @db.ObjectId
  progOption               ProgOption                @relation(fields: [progOptionId], references: [id])
}

model ProgMinStandards {
  id                         String                      @id @default(auto()) @map("_id") @db.ObjectId
  programmeList              ProgrammeMinReq[]
  programmeSelectionCriteria ProgrammeSelectionCriteria?
  progOptionId               String                      @unique @db.ObjectId
  progOption                 ProgOption                  @relation(fields: [progOptionId], references: [id])
}

model ProgrammeSelectionCriteria {
  progMinStandardsId     String           @id @map("_id") @db.ObjectId
  progMinStandards       ProgMinStandards @relation(fields: [progMinStandardsId], references: [id])
  requiredProgrammeCount Int
  progOptionId           String           @unique @db.ObjectId
  progOption             ProgOption       @relation(fields: [progOptionId], references: [id])
}

model SubjectSelectionCriteria {
  subjectStandardsId   String           @id @map("_id") @db.ObjectId
  subjectStandards     SubjectStandards @relation(fields: [subjectStandardsId], references: [id])
  requiredSubjectCount Int
  progOptionId         String           @unique @db.ObjectId
  progOption           ProgOption       @relation(fields: [progOptionId], references: [id])
}

model ProgOption {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  programmeCode String
  programme     Programme @relation(fields: [programmeCode], references: [code])

  subjectSelectionCriteria   SubjectSelectionCriteria?
  programmeSelectionCriteria ProgrammeSelectionCriteria?
  subjectStandards           SubjectStandards?
  progMinStandards           ProgMinStandards?
  createdAt                  DateTime
}

//UNIVERSITY SELECTION

//UNIVERSITY HIERARCHY

model Campus {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  location String
  country  String
  colleges College[]
}

model College {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  campusId    String       @db.ObjectId
  campus      Campus       @relation(fields: [campusId], references: [id])
  departments Department[]
}

model Department {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  collegeId  String      @db.ObjectId
  college    College     @relation(fields: [collegeId], references: [id])
  programmes Programme[]
}

// Remove studey year 
// FIXME: Remove decision decided
model Programme {
  code                         String                       @id @map("_id")
  name                         String
  level                        ProgrammeLevel
  duration                     Int // FIXME: Remeove
  type                         ProgrammeType
  language                     String // FIXME: Remeove
  departmentId                 String                       @db.ObjectId
  department                   Department                   @relation(fields: [departmentId], references: [id])
  tuitionFee                   Float // FIXME: Remeove
  applicantProgrammePriorities ApplicantProgrammePriority[] // FIXME: Remeove
  studyYears                   StudyYear[] // FIXME: Remeove
  progOptions                  ProgOption[] // TODO: Remains
  programmeInstance            ProgrammeInstance[]
}

// FIXME: Use programme instance
model StudyYear {
  id    String         @id @default(auto()) @map("_id") @db.ObjectId
  class ProgrammeClass

  programmeCode       String
  programme           Programme             @relation(fields: [programmeCode], references: [code])
  StudyYearEnlorments StudentRegistration[]
  modules             Module[]
}

model Module {
  code               String @id @map("_id")
  name               String
  credits            Int
  assessmentMaxScore Int

  resources       ModuleFile[]
  moduleInstances ModuleInstance[]
  studyYearId     String           @db.ObjectId
  studyYear       StudyYear        @relation(fields: [studyYearId], references: [id])
}

model ModuleFile {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  url  String @default("")
  key  String @default("")
  type String @default("")
  name String @default("")
  size Int    @default(0)

  moduleCode String
  module     Module @relation(fields: [moduleCode], references: [code])
}

model ModuleInstance {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  moduleCode         String
  module             Module              @relation(fields: [moduleCode], references: [code])
  lecturerId         String
  lecturer           Staff               @relation(fields: [lecturerId], references: [staffId])
  semesterId         String              @db.ObjectId
  semester           Semester            @relation(fields: [semesterId], references: [id])
  academicScorecards AcademicScorecard[]
  components         Component[]
}

// TODO: use currentIntake for timetable selection
// FIXME: Add applicantProgrammePriorities , language , study year , duration , tuitionFee
model ProgrammeInstance {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  programmeCode  String
  programme      Programme            @relation(fields: [programmeCode], references: [code])
  academicYearId String               @db.ObjectId
  academicYear   AcademicYear         @relation(fields: [academicYearId], references: [id])
  currentIntake  ApplicantSelection[]
  maximumIntake  Int
}

//UNIVERSITY HIERARCHY

//UNIVERSITY GRADING

model Component {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  totaltMarks Int
  type        ComponentType
  description String?

  moduleInstanceId     String                 @db.ObjectId
  moduleInstance       ModuleInstance         @relation(fields: [moduleInstanceId], references: [id])
  continuousAssessment ContinuousAssessment[]
}

model ContinuousAssessment {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  marks Int?

  // For assignment
  files       ContinuousAssessmentFile[]
  submittedAt DateTime?
  deadline    DateTime?

  componentId         String            @db.ObjectId
  component           Component         @relation(fields: [componentId], references: [id])
  academicScorecardId String            @db.ObjectId
  academicScorecard   AcademicScorecard @relation(fields: [academicScorecardId], references: [id])
}

model ContinuousAssessmentFile {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  url  String @default("")
  key  String @default("")
  type String @default("")
  name String @default("")
  size Int    @default(0)

  caId String               @db.ObjectId
  ca   ContinuousAssessment @relation(fields: [caId], references: [id])
}

model UniversityExamination {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  marks Int?

  academicScorecardId String            @unique @db.ObjectId
  academicScorecard   AcademicScorecard @relation(fields: [academicScorecardId], references: [id])
}

model AcademicScorecard {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  ca                    ContinuousAssessment[]
  universityExamination UniversityExamination?
  studentRegistrationId String                 @db.ObjectId
  studentRegistration   StudentRegistration    @relation(fields: [studentRegistrationId], references: [id])
  moduleInstanceId      String                 @db.ObjectId
  moduleInstance        ModuleInstance         @relation(fields: [moduleInstanceId], references: [id])
}

//UNIVERSITY GRADING

//UNIVERSITY EVENTS

model AcademicYear {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime
  name      String   @unique

  applicationStartTime DateTime // Start time of the application
  applicationEndTime   DateTime // End time of the application
  newStudents          StudentOnboarding[]
  semesters            Semester[]
  programmes           ProgrammeInstance[]
}

model Semester {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime

  semesterEnrollments StudentRegistration[]
  academicYearId      String                @db.ObjectId
  academicYear        AcademicYear          @relation(fields: [academicYearId], references: [id])
  moduleInstances     ModuleInstance[]
}

//UNIVERSITY EVENTS
