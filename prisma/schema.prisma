// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  EXAMINATION_OFFICER
  LECTURE
  STUDENT
  APPLICANT
  RESIDENCE_MANAGER
}

enum ApplicationStatus {
  UNDER_REVIEW //The application is currently being reviewed by the admissions team.
  ACCEPTED //The application has been approved. The applicant can now proceed to enrollment.
  REJECTED //The application has not been approved. The applicant will not be able to enroll.
  DRAFT
}

enum ProgrammeType {
  FULL_TIME
  PART_TIME
}

enum ProgrammeLevel {
  DIPLOMA
  CERTIFICATE
  BACHELOR
  MASTERS
  PHD
}

enum ExaminationType {
  NECTA
  FOREIGN
  NECTA1988
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum EducationLevel {
  FORM_IV
  FORM_VI
  VETA_NVA_III
  NTA_LEVEL_IV
  NTA_LEVEL_V
  DIPLOMA
  DEGREE
  MASTERS
}

enum ResidenceRoomType {
  DOUBLE
  SINGLE
  SELF
}

enum ResidenceRoomStatus {
  OCCUPIED
  VACANT
  RESERVED
}

enum ResidencePlan {
  SHORT_TERM // Referring to the 1-month option.
  QUARTERLY // Indicating the 3-month choice.
}

//USERS

model Applicant {
  username                 String                    @id @map("_id")
  hashedPassword           String
  role                     Role                      @default(APPLICANT)
  formIVIndex              String
  createdAt                DateTime
  applicationType          ProgrammeLevel
  educationOrigin          ExaminationType
  highestEducationLevel    EducationLevel
  academicYearId           String                    @db.ObjectId
  academicYear             AcademicYear              @relation(fields: [academicYearId], references: [id])
  details                  ApplicationDetails?
  formalImage              ApplicantFormalImage?
  studentOnboarding        StudentOnboarding?
  universityPolicyAccepted UniversityPolicyAccepted?
  applicantNotification    ApplicantNotification[]
}

model ResidenceManager {
  username       String @id @map("_id")
  firstName      String @default("")
  middleName     String @default("")
  lastName       String @default("")
  hashedPassword String
  role           Role   @default(RESIDENCE_MANAGER)
}

//USERS

//APPLICANT DATA
// FIXME: ADD University application ID to check the application period
model ApplicationDetails {
  applicantUsername            String                         @id @map("_id")
  applicant                    Applicant                      @relation(fields: [applicantUsername], references: [username])
  createdAt                    DateTime
  submittedAt                  DateTime?
  applicationStatus            ApplicationStatus              @default(DRAFT)
  // Properties from ApplicantProfile
  nida                         String                         @default("")
  firstName                    String                         @default("")
  middleName                   String                         @default("")
  lastName                     String                         @default("")
  nationality                  String                         @default("")
  gender                       String                         @default("")
  dateOfBirth                  String                         @default("")
  maritalStatus                String                         @default("")
  placeOfBirth                 String                         @default("")
  disability                   String                         @default("")
  // Properties from ApplicantContacts
  phone                        String                         @default("")
  email                        String?                        @default("")
  alternativeEmail             String?                        @default("")
  alternativePhone             String?                        @default("")
  streetAddress                String                         @default("")
  city                         String                         @default("")
  region                       String                         @default("")
  postalCode                   String                         @default("")
  country                      String                         @default("")
  // Properties from ApplicantEmergencyContacts
  emergencyFullName            String                         @default("")
  emergencyPhone               String                         @default("")
  emergencyEmail               String?                        @default("")
  emergencyAlternativeEmail    String?                        @default("")
  emergencyAlternativePhone    String?                        @default("")
  emergencyStreetAddress       String                         @default("")
  emergencyCity                String                         @default("")
  emergencyRegion              String                         @default("")
  emergencyPostalCode          String                         @default("")
  emergencyCountry             String                         @default("")
  emergencyRelation            String                         @default("")
  // Properties from ApplicationPayment
  controlNumber                String                         @default("")
  paymentStatus                PaymentStatus                  @default(PENDING)
  //relations
  educationFile                ApplicantEducationFile?
  applicantProgrammePriorities ApplicantProgrammePriority[]
  educationBackgrounds         ApplicantEducationBackground[]
  additionalEducationFiles     ApplicantAdditionalFile[]
}

model ApplicantNotification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String // Title of the notification
  message   String // The actual notification message
  read      Boolean // Whether the notification has been read
  timestamp DateTime // When the notification was created

  applicantId String
  applicant   Applicant @relation(fields: [applicantId], references: [username])
}

model ApplicantProgrammePriority {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  priority           Int
  applicantUsername  String
  applicationDetails ApplicationDetails @relation(fields: [applicantUsername], references: [applicantUsername])

  programmeCode String
  programme     Programme @relation(fields: [programmeCode], references: [code])
}

model ApplicantEducationBackground {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  position   Int
  level      String @default("")
  schoolName String @default("")
  startYear  String @default("")
  endYear    String @default("")

  applicantUsername  String
  applicationDetails ApplicationDetails @relation(fields: [applicantUsername], references: [applicantUsername])
}

model ApplicantFormalImage {
  applicantUsername String    @id @map("_id")
  applicant         Applicant @relation(fields: [applicantUsername], references: [username])
  imageUrl          String    @default("")
  key               String    @default("")
  name              String    @default("")
  size              Int       @default(0)
}

model ApplicantEducationFile {
  url  String @default("")
  key  String @default("")
  type String @default("")
  name String @default("")
  size Int    @default(0)

  applicantUsername  String             @id @map("_id")
  applicationDetails ApplicationDetails @relation(fields: [applicantUsername], references: [applicantUsername])
}

model ApplicantAdditionalFile {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  url  String
  type String
  key  String
  name String
  size Int

  applicantUsername  String
  applicationDetails ApplicationDetails @relation(fields: [applicantUsername], references: [applicantUsername])
}

model UniversityPolicyAccepted {
  applicantUsername String    @id @map("_id")
  applicant         Applicant @relation(fields: [applicantUsername], references: [username])

  hasAcceptedRules Boolean   @default(false)
  acceptedAt       DateTime?
}

model StudentOnboarding {
  applicantUsername String    @id @map("_id")
  applicant         Applicant @relation(fields: [applicantUsername], references: [username])

  currentPage      Int     @default(0)
  hasDocuments     Boolean @default(false)
  hasAccommodation Boolean @default(false)
  registeredBy     String  @default("")
}

//APPLICANT DATA

// RESIDENCE MANAGEMENT

model ResidenceManagerDetails {
  username               String          @id @map("_id")
  residenceName          String
  phone                  String          @default("")
  email                  String?         @default("")
  alternativeEmail       String?         @default("")
  alternativePhoneNumber String?         @default("")
  streetAddress          String          @default("")
  city                   String          @default("")
  region                 String          @default("")
  postalCode             String          @default("")
  country                String          @default("")
  uniDistance            String          @default("")
  rooms                  ResidenceRoom[]
}

model ResidenceRoom {
  id                 String                  @id @default(auto()) @map("_id") @db.ObjectId
  amenities          String[]
  type               ResidenceRoomType
  status             ResidenceRoomStatus
  maintenance        Boolean
  images             ResidenceRoomImage[]
  residenceManagerId String
  managerDetails     ResidenceManagerDetails @relation(fields: [residenceManagerId], references: [username])
  bookings           ResidenceBooking[]
}

model ResidenceBooking {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  customerId String
  roomId     String            @db.ObjectId
  room       ResidenceRoom     @relation(fields: [roomId], references: [id])
  payment    ResidencePayment?
  plan       ResidencePlan
}

model ResidencePayment {
  bookingId String           @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  amount    String
  status    PaymentStatus
  booking   ResidenceBooking @relation(fields: [bookingId], references: [id])
}

model ResidenceRoomImage {
  key           String        @id @map("_id")
  roomId        String        @db.ObjectId
  residenceRoom ResidenceRoom @relation(fields: [roomId], references: [id])
  imageUrl      String        @default("")
  name          String        @default("")
  size          Int           @default(0)
}

// RESIDENCE MANAGEMENT

//UNIVERSITY HIERARCHY

model Campus {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  location String
  country  String
  colleges College[]
}

model College {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  campusId    String       @db.ObjectId
  campus      Campus       @relation(fields: [campusId], references: [id])
  departments Department[]
}

model Department {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  collegeId  String      @db.ObjectId
  college    College     @relation(fields: [collegeId], references: [id])
  programmes Programme[]
}

model Programme {
  code                         String                       @id @map("_id")
  name                         String
  level                        ProgrammeLevel
  duration                     Int
  type                         ProgrammeType
  language                     String
  departmentId                 String                       @db.ObjectId
  department                   Department                   @relation(fields: [departmentId], references: [id])
  tuitionFee                   Float
  qualification                String
  availability                 Boolean                      @default(true)
  applicantProgrammePriorities ApplicantProgrammePriority[]
  // programmeYears ProgrammeYear[]
}

// model ProgrammeYear {
//   id           Int           @id @default(autoincrement())
//   name         String // This could be "First Year", "Second Year", etc.
//   students     Student[]
//   studentYears StudentYear[]
//   subjects     Subject[]
// }

//UNIVERSITY HIERARCHY

//UNIVERSITY ANUAL EVENTS

model AcademicYear {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime
  name      String   @unique

  applicationStartTime DateTime // Start time of the application
  applicationEndTime   DateTime // End time of the application
  applicants           Applicant[]
}

//UNIVERSITY ANUAL EVENTS
